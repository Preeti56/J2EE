import java.util.Properties;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.jms.Topic;
import javax.jms.TopicConnection;
import javax.jms.TopicConnectionFactory;
import javax.jms.TopicSession;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;


public class TopicConsumer implements MessageListener {
	public static final String TOPIC = "topic/PJPubSubTopic";
	
	public static void main(String[] args) throws JMSException, NamingException {
		System.out.println("----Entering JMS TopicConsumer----");
		
		// Obtain a JNDI connection
		Context initialContext = TopicConsumer.getInitialContext();
		System.out.println("Initial Context created..");

		// Lookup a JMS Connection factory
		TopicConnectionFactory topicConnectionFactory = (TopicConnectionFactory) initialContext
						.lookup("jms/GFConnectionFactory");
		System.out.println("Lookup of Connection Factory complete..");
		
		// Looking up a JMS topic
		Topic topic = (Topic) initialContext.lookup(TopicConsumer.TOPIC);
		System.out.println("Lookup of Topic done...");
				
		// Create a JMS connection
		TopicConnection topicConnection = topicConnectionFactory
						.createTopicConnection();
		System.out.println("Connection available...");
		
		// Creating Session object
		TopicSession topicSession = topicConnection.createTopicSession(false,
				Session.AUTO_ACKNOWLEDGE);
		System.out.println("Session is ready...");

		//Creating Subscriber and setting a JMS message listener
		topicSession.createSubscriber(topic).setMessageListener(new TopicConsumer());
		System.out.println("Subscriber is ready to receive...");
		
		//Starting the Connection
		topicConnection.start();

		System.out.println("----Exiting JMS TopicConsumer----");
	}
	

	@Override
	public void onMessage(Message msg) {
		try {
			System.out.println("Incoming msgs: " + ((TextMessage) msg).getText());
		} catch (JMSException e) {
			e.printStackTrace();
		}

	}
	
	// Specifying the JNDI properties specific to GlassFish Server
	public static Context getInitialContext() throws JMSException,
			NamingException {
		Properties props = new Properties();
		props.setProperty("java.naming.factory.initial","com.sun.enterprise.naming.SerialInitContextFactory");
		props.setProperty("java.naming.factory.url.pkgs","com.sun.enterprise.naming");
		props.setProperty("java.naming.provider.url","http://localhost:8080");
		Context context = new InitialContext(props);
		return context;
	}
	
//	// Specifying the JNDI properties specific to WebLogic Server
//	public static Context getInitialContext() throws JMSException,
//			NamingException {
//		Properties props = new Properties();
//		props.setProperty(Context.INITIAL_CONTEXT_FACTORY,"weblogic.jndi.WLInitialContextFactory");
//		props.setProperty(Context.PROVIDER_URL,"t3://localhost:7001");
//		Context context = new InitialContext(props);
//		return context;
//	}
	
//	// Specifying the JNDI properties specific to Wildfly Server
//	public static Context getInitialContext() throws JMSException,
//			NamingException {
//		Properties props = new Properties();
//		props.setProperty("java.naming.factory.initial","com.sun.enterprise.naming.SerialInitContextFactory");
//		props.setProperty("java.naming.factory.url.pkgs","com.sun.enterprise.naming");
//		props.setProperty("java.naming.provider.url","http://localhost:8080");
//		Context context = new InitialContext(props);
//		return context;
//	}
	
//	// Specifying the JNDI properties specific to Wildfly
//	public static Context getInitialContext() throws JMSException,
//			NamingException {
//		Properties props = new Properties();
//		props.setProperty("java.naming.factory.initial","org.jnp.interfaces.NamingContextFactory");
//		props.setProperty("java.naming.factory.url.pkgs","org.jboss.naming");
//		props.setProperty("java.naming.provider.url","localhost:1099");
//		Context context = new InitialContext(props);
//		return context;
//	}
}
