import java.util.Properties;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.jms.MessageListener;
import javax.jms.Topic;
import javax.jms.TopicConnection;
import javax.jms.TopicConnectionFactory;
import javax.jms.TopicPublisher;
import javax.jms.TopicSession;
import javax.jms.TopicSubscriber;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;


public class Chat implements MessageListener {
	public static final String TOPIC="topic/PJPubSubChatTopic";
	
	private TopicSession pubSession;
	private TopicSession subSession;
	private TopicPublisher publisher;
	private TopicConnection topicConnection;
	private String username;
	
	
	
	//Initialize the instance variable
	public void initialize(TopicConnection con, TopicSession pubSess, TopicSession subSess,TopicPublisher pub, String uname){
		this.topicConnection = con;
		this.pubSession = pubSess;
		this.subSession = subSess;
		this.publisher = pub;
		this.username = uname;
	}
	
	public Chat(String topicName, String uname, String pwd) throws JMSException, NamingException{
		//Obtain a JNDI connection
		Context initialContext = Chat.getInitialContext();
		
		//Lookup a JMS Connection factory
		TopicConnectionFactory topicConnectionFactory = (TopicConnectionFactory)initialContext.lookup("ConnectionFactory");
		
		//Create a JMS connection
		TopicConnection topicConnection = topicConnectionFactory.createTopicConnection();
		
		//Creating publisher and subscriber Session object
		TopicSession pubSession = topicConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
		TopicSession subSession = topicConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
		
		//Looking up a JMS topic
		Topic topic = (Topic)initialContext.lookup(Chat.TOPIC);
		
		//create a JMS publisher and subscriber
		TopicPublisher publisher = pubSession.createPublisher(topic);
		TopicSubscriber subscriber = subSession.createSubscriber(topic);
		
		//set a JMS message listerner
		subscriber.setMessageListener(this);
		
		//Initialize the Chat Application
		initialize(topicConnection,pubSession,subSession,publisher,username);
		
		//Start the JMS connection; allows message to be delivered
		topicConnection.start();
	}
	
	// Specifying the JNDI properties specific to the vendor
	public static Context getInitialContext() throws JMSException, NamingException{
		Properties props = new Properties();
		props.setProperty("java.naming.factory.initial","org.jnp.interfaces.NamingContextFactory");
		props.setProperty("java.naming.factory.url.pkgs","org.jboss.naming");
		props.setProperty("java.naming.provider.url","localhost:1099");
		Context context = new InitialContext(props);
		return context;
	}
	
	//Receive the message from topic subscriber
	@Override
	public void onMessage(Message msg) {
		try {
			System.out.println(((TextMessage)msg).getText());
		} catch (JMSException e) {
			e.printStackTrace();
		}		
	}
	
	//Create and send message using topic publisher
	protected void writeMessage(String text) throws JMSException{
		TextMessage message = pubSession.createTextMessage();
		((TextMessage)msg) = 
		publisher.publish();
	}
	public static void main(String[] args) throws NamingException, JMSException {
		if(args.length!=1){
			System.out.println("A username is requires");
		}else{
			
			String username = args[0];
			Chat chat = new Chat();
			
			;
			
			
			
			chat.subscribe();
			chat.publish();
		}

	}
	

}
